/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BooleanQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaire": Object;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface ChoiceQuestion {
        "answers": any;
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        "key": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaire": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "valueSets": Array<any>;
        "variant": any;
    }
    interface DateQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface DateTimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface DecimalQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface DisplayQuestion {
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        "question": any;
        "variant": any;
    }
    interface FullQuestionnaire {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        "enableNext": boolean;
        "enableReturn": boolean;
        "filteredItemList": Array<any>;
        "locale": string;
        /**
          * Primary color
         */
        "primary": string;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "spinner": any;
        "startCount": number;
        "valueSets": Array<any>;
        "variant": any;
        "vasSelectedValueLabel": string;
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
    interface GroupQuestion {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "editMode": boolean;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        "enableReturn": boolean;
        "filteredItemList": Array<any>;
        "lastQuestion": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        "startCount": Number;
        "valueSets": Array<any>;
        "variant": any;
    }
    interface GroupedQuestionnaire {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "editMode": boolean;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "enableReturn": boolean;
        "filteredItemList": Array<any>;
        "lastQuestion": boolean;
        "locale": string;
        /**
          * Primary color
         */
        "primary": string;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        "spinner": any;
        "startCount": number;
        "valueSets": Array<any>;
        "variant": any;
        "vasSelectedValueLabel": string;
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
    interface InformationPage {
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        "filteredItemList": Array<any>;
        "informationPageText": String;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "questionnaire": any;
        "trademarkText": string;
    }
    interface IntegerQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
        "vasSelectedValueLabel": string;
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
    interface QuestionnaireRenderer {
        /**
          * FHIR-Base Url
         */
        "baseUrl": string;
        /**
          * If basicAuth is true, the authorization header in server requests will be set to "Basic "
         */
        "basicAuth": boolean;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * If true the render will show the button to exit the renderer
         */
        "editMode": boolean;
        /**
          * Allows the renderer to show errors in the console while emitting error-events
         */
        "enableErrorConsoleLogging": boolean;
        /**
          * If true,
         */
        "enableExpand": boolean;
        /**
          * If true the Renderer will return a QuestionnaireResponse with all items, even if some items have been deactivated by enableWhen
         */
        "enableFullQuestionnaireResponse": boolean;
        /**
          * If true, shows the description of the group for every question thats part of the group
         */
        "enableGroupDescription": boolean;
        /**
          * If true enables the use of the informalLocal - only available for german translation
         */
        "enableInformalLocale": boolean;
        /**
          * If true enables the renderer to show the informationPage
         */
        "enableInformationPage": boolean;
        /**
          * Enable the button that can be used to show the summary or end the questionnaire
         */
        "enableNext": boolean;
        /**
          * Enable the return-button to exit the render-view
         */
        "enableReturn": boolean;
        /**
          * If true, enables the summary to send QuestionnaireResponses to the FHIR Server
         */
        "enableSendQuestionnaireResponse": boolean;
        /**
          * Enable the summary. The summary will be shown if enableSummary is true
         */
        "enableSummary": boolean;
        /**
          * Text shown in the top half of the information page
         */
        "informationPageText": string;
        /**
          * If true, the Renderer will show the last question
         */
        "lastQuestion": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        /**
          * Current type of Questionnaire-Style to display Available: stepper-questionnaire, grouped-questionnaire, full-questionnaire
         */
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        /**
          * FHIR-Resource Questionnaire
         */
        "questionnaire": any;
        /**
          * FHIR-Resource QuestionnaireResponse
         */
        "questionnaireResponse": any;
        /**
          * The Url to fetch the Questionnaire from
         */
        "questionnaireUrl": string;
        /**
          * Secondary color
         */
        "secondary": string;
        /**
          * If showOnlySummary is true, the questionnaire-renderer will only show the summary
         */
        "showOnlySummary": boolean;
        /**
          * if true shows the remarks at the bottom of the summary
         */
        "showSummaryRemarks": boolean;
        /**
          * ID of the question in the ItemList where in the list of questions the renderer should start
         */
        "startQuestion": Object;
        /**
          * FHIR-Resource Patient
         */
        "subject": any;
        /**
          * Text shown in the top half of the Summary
         */
        "summaryText": string;
        /**
          * FHIR-Resource Task
         */
        "task": any;
        /**
          * A token that can be send with server-requests
         */
        "token": string;
        /**
          * Shows a trademark/copyright text at the bottom of the renderer
         */
        "trademarkText": string;
        /**
          * List of ValueSets that are needed to display the given questionnaire
         */
        "valueSets": Array<any>;
        "variant": any;
        /**
          * Text for the label of the selected value
         */
        "vasSelectedValueLabel": string;
        /**
          * If true shows the selected value for the vas scale
         */
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
    interface QuestionnaireSummary {
        "baseUrl": string;
        "basicAuth": boolean;
        "demoMode": Boolean;
        "editable": boolean;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        "enableSendQuestionnaireResponse": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        "questionnaire": any;
        "questionnaireResponse": any;
        "showSummaryRemarks": boolean;
        /**
          * FHIR Patient-Resource
         */
        "subject": Object;
        "summary_text": string;
        "task": any;
        "token": string;
        "trademarkText": string;
    }
    interface SimpleSpinner {
        "borderTopColor": string;
        "message": String;
    }
    interface StepperQuestionnaire {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "editMode": boolean;
        "enableErrorConsoleLogging": boolean;
        "enableGroupDescription": boolean;
        "enableInformalLocale": boolean;
        "enableNext": boolean;
        "enableReturn": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "enableSummary": boolean;
        "filteredItemList": Array<any>;
        "lastQuestion": boolean;
        "locale": string;
        /**
          * Primary color
         */
        "primary": string;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        "spinner": any;
        "startCount": number;
        "trademarkText": string;
        "valueSets": Array<any>;
        "variant": any;
        "vasSelectedValueLabel": string;
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
    interface StringQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface TestUi {
    }
    interface TextQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface TimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface UrlQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "enableErrorConsoleLogging": boolean;
        "enableInformalLocale": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "variant": any;
    }
    interface VasQuestion {
        "labelLower": String;
        "labelUpper": String;
        "max": number;
        "min": number;
        "selected": number;
        "step": number;
        "variant": any;
        "vasSelectedValueLabel": string;
        "vasShowSelectedValue": boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical": boolean;
    }
}
export interface BooleanQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBooleanQuestionElement;
}
export interface ChoiceQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChoiceQuestionElement;
}
export interface DateQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDateQuestionElement;
}
export interface DateTimeQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDateTimeQuestionElement;
}
export interface DecimalQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDecimalQuestionElement;
}
export interface DisplayQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDisplayQuestionElement;
}
export interface FullQuestionnaireCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFullQuestionnaireElement;
}
export interface GroupQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGroupQuestionElement;
}
export interface GroupedQuestionnaireCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGroupedQuestionnaireElement;
}
export interface InformationPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInformationPageElement;
}
export interface IntegerQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIntegerQuestionElement;
}
export interface QuestionnaireRendererCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLQuestionnaireRendererElement;
}
export interface QuestionnaireSummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLQuestionnaireSummaryElement;
}
export interface StepperQuestionnaireCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStepperQuestionnaireElement;
}
export interface StringQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStringQuestionElement;
}
export interface TextQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextQuestionElement;
}
export interface TimeQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTimeQuestionElement;
}
export interface UrlQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUrlQuestionElement;
}
export interface VasQuestionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVasQuestionElement;
}
declare global {
    interface HTMLBooleanQuestionElement extends Components.BooleanQuestion, HTMLStencilElement {
    }
    var HTMLBooleanQuestionElement: {
        prototype: HTMLBooleanQuestionElement;
        new (): HTMLBooleanQuestionElement;
    };
    interface HTMLChoiceQuestionElement extends Components.ChoiceQuestion, HTMLStencilElement {
    }
    var HTMLChoiceQuestionElement: {
        prototype: HTMLChoiceQuestionElement;
        new (): HTMLChoiceQuestionElement;
    };
    interface HTMLDateQuestionElement extends Components.DateQuestion, HTMLStencilElement {
    }
    var HTMLDateQuestionElement: {
        prototype: HTMLDateQuestionElement;
        new (): HTMLDateQuestionElement;
    };
    interface HTMLDateTimeQuestionElement extends Components.DateTimeQuestion, HTMLStencilElement {
    }
    var HTMLDateTimeQuestionElement: {
        prototype: HTMLDateTimeQuestionElement;
        new (): HTMLDateTimeQuestionElement;
    };
    interface HTMLDecimalQuestionElement extends Components.DecimalQuestion, HTMLStencilElement {
    }
    var HTMLDecimalQuestionElement: {
        prototype: HTMLDecimalQuestionElement;
        new (): HTMLDecimalQuestionElement;
    };
    interface HTMLDisplayQuestionElement extends Components.DisplayQuestion, HTMLStencilElement {
    }
    var HTMLDisplayQuestionElement: {
        prototype: HTMLDisplayQuestionElement;
        new (): HTMLDisplayQuestionElement;
    };
    interface HTMLFullQuestionnaireElement extends Components.FullQuestionnaire, HTMLStencilElement {
    }
    var HTMLFullQuestionnaireElement: {
        prototype: HTMLFullQuestionnaireElement;
        new (): HTMLFullQuestionnaireElement;
    };
    interface HTMLGroupQuestionElement extends Components.GroupQuestion, HTMLStencilElement {
    }
    var HTMLGroupQuestionElement: {
        prototype: HTMLGroupQuestionElement;
        new (): HTMLGroupQuestionElement;
    };
    interface HTMLGroupedQuestionnaireElement extends Components.GroupedQuestionnaire, HTMLStencilElement {
    }
    var HTMLGroupedQuestionnaireElement: {
        prototype: HTMLGroupedQuestionnaireElement;
        new (): HTMLGroupedQuestionnaireElement;
    };
    interface HTMLInformationPageElement extends Components.InformationPage, HTMLStencilElement {
    }
    var HTMLInformationPageElement: {
        prototype: HTMLInformationPageElement;
        new (): HTMLInformationPageElement;
    };
    interface HTMLIntegerQuestionElement extends Components.IntegerQuestion, HTMLStencilElement {
    }
    var HTMLIntegerQuestionElement: {
        prototype: HTMLIntegerQuestionElement;
        new (): HTMLIntegerQuestionElement;
    };
    interface HTMLQuestionnaireRendererElement extends Components.QuestionnaireRenderer, HTMLStencilElement {
    }
    var HTMLQuestionnaireRendererElement: {
        prototype: HTMLQuestionnaireRendererElement;
        new (): HTMLQuestionnaireRendererElement;
    };
    interface HTMLQuestionnaireSummaryElement extends Components.QuestionnaireSummary, HTMLStencilElement {
    }
    var HTMLQuestionnaireSummaryElement: {
        prototype: HTMLQuestionnaireSummaryElement;
        new (): HTMLQuestionnaireSummaryElement;
    };
    interface HTMLSimpleSpinnerElement extends Components.SimpleSpinner, HTMLStencilElement {
    }
    var HTMLSimpleSpinnerElement: {
        prototype: HTMLSimpleSpinnerElement;
        new (): HTMLSimpleSpinnerElement;
    };
    interface HTMLStepperQuestionnaireElement extends Components.StepperQuestionnaire, HTMLStencilElement {
    }
    var HTMLStepperQuestionnaireElement: {
        prototype: HTMLStepperQuestionnaireElement;
        new (): HTMLStepperQuestionnaireElement;
    };
    interface HTMLStringQuestionElement extends Components.StringQuestion, HTMLStencilElement {
    }
    var HTMLStringQuestionElement: {
        prototype: HTMLStringQuestionElement;
        new (): HTMLStringQuestionElement;
    };
    interface HTMLTestUiElement extends Components.TestUi, HTMLStencilElement {
    }
    var HTMLTestUiElement: {
        prototype: HTMLTestUiElement;
        new (): HTMLTestUiElement;
    };
    interface HTMLTextQuestionElement extends Components.TextQuestion, HTMLStencilElement {
    }
    var HTMLTextQuestionElement: {
        prototype: HTMLTextQuestionElement;
        new (): HTMLTextQuestionElement;
    };
    interface HTMLTimeQuestionElement extends Components.TimeQuestion, HTMLStencilElement {
    }
    var HTMLTimeQuestionElement: {
        prototype: HTMLTimeQuestionElement;
        new (): HTMLTimeQuestionElement;
    };
    interface HTMLUrlQuestionElement extends Components.UrlQuestion, HTMLStencilElement {
    }
    var HTMLUrlQuestionElement: {
        prototype: HTMLUrlQuestionElement;
        new (): HTMLUrlQuestionElement;
    };
    interface HTMLVasQuestionElement extends Components.VasQuestion, HTMLStencilElement {
    }
    var HTMLVasQuestionElement: {
        prototype: HTMLVasQuestionElement;
        new (): HTMLVasQuestionElement;
    };
    interface HTMLElementTagNameMap {
        "boolean-question": HTMLBooleanQuestionElement;
        "choice-question": HTMLChoiceQuestionElement;
        "date-question": HTMLDateQuestionElement;
        "date-time-question": HTMLDateTimeQuestionElement;
        "decimal-question": HTMLDecimalQuestionElement;
        "display-question": HTMLDisplayQuestionElement;
        "full-questionnaire": HTMLFullQuestionnaireElement;
        "group-question": HTMLGroupQuestionElement;
        "grouped-questionnaire": HTMLGroupedQuestionnaireElement;
        "information-page": HTMLInformationPageElement;
        "integer-question": HTMLIntegerQuestionElement;
        "questionnaire-renderer": HTMLQuestionnaireRendererElement;
        "questionnaire-summary": HTMLQuestionnaireSummaryElement;
        "simple-spinner": HTMLSimpleSpinnerElement;
        "stepper-questionnaire": HTMLStepperQuestionnaireElement;
        "string-question": HTMLStringQuestionElement;
        "test-ui": HTMLTestUiElement;
        "text-question": HTMLTextQuestionElement;
        "time-question": HTMLTimeQuestionElement;
        "url-question": HTMLUrlQuestionElement;
        "vas-question": HTMLVasQuestionElement;
    }
}
declare namespace LocalJSX {
    interface BooleanQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: BooleanQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: BooleanQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaire"?: Object;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface ChoiceQuestion {
        "answers"?: any;
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        "key"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: ChoiceQuestionCustomEvent<any>) => void;
        "onEmitRemoveRequiredAnswer"?: (event: ChoiceQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: ChoiceQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaire"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "valueSets"?: Array<any>;
        "variant"?: any;
    }
    interface DateQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: DateQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: DateQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface DateTimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: DateTimeQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: DateTimeQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface DecimalQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: DecimalQuestionCustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: DecimalQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: DecimalQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface DisplayQuestion {
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: DisplayQuestionCustomEvent<any>) => void;
        "question"?: any;
        "variant"?: any;
    }
    interface FullQuestionnaire {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        "enableNext"?: boolean;
        "enableReturn"?: boolean;
        "filteredItemList"?: Array<any>;
        "locale"?: string;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: FullQuestionnaireCustomEvent<any>) => void;
        "onReturn"?: (event: FullQuestionnaireCustomEvent<any>) => void;
        "onSummary"?: (event: FullQuestionnaireCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "questionnaire": any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "spinner"?: any;
        "startCount"?: number;
        "valueSets"?: Array<any>;
        "variant"?: any;
        "vasSelectedValueLabel"?: string;
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface GroupQuestion {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "editMode"?: boolean;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        "enableReturn"?: boolean;
        "filteredItemList"?: Array<any>;
        "lastQuestion"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        /**
          * Emits new Event to give the required Question to Parent-Component to be added to the List of answered Questions
         */
        "onAddRequiredAnswer"?: (event: GroupQuestionCustomEvent<any>) => void;
        /**
          * Emits new Event to give the required Question to Parent-Component to be removed from the List of answered Questions
         */
        "onEmitRemoveRequiredAnswer"?: (event: GroupQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: GroupQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaire": any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "startCount"?: Number;
        "valueSets"?: Array<any>;
        "variant"?: any;
    }
    interface GroupedQuestionnaire {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "editMode"?: boolean;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "enableReturn"?: boolean;
        "filteredItemList"?: Array<any>;
        "lastQuestion"?: boolean;
        "locale"?: string;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: GroupedQuestionnaireCustomEvent<any>) => void;
        /**
          * Counts up the Question-Number
         */
        "onFinish"?: (event: GroupedQuestionnaireCustomEvent<any>) => void;
        /**
          * Counts down the Question-Number
         */
        "onReturn"?: (event: GroupedQuestionnaireCustomEvent<any>) => void;
        "onSummary"?: (event: GroupedQuestionnaireCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "questionnaire": any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "spinner"?: any;
        "startCount"?: number;
        "valueSets"?: Array<any>;
        "variant"?: any;
        "vasSelectedValueLabel"?: string;
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface InformationPage {
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        "filteredItemList"?: Array<any>;
        "informationPageText"?: String;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "onStartQuestionnaire"?: (event: InformationPageCustomEvent<any>) => void;
        "questionnaire"?: any;
        "trademarkText"?: string;
    }
    interface IntegerQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: IntegerQuestionCustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: IntegerQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: IntegerQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
        "vasSelectedValueLabel"?: string;
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface QuestionnaireRenderer {
        /**
          * FHIR-Base Url
         */
        "baseUrl"?: string;
        /**
          * If basicAuth is true, the authorization header in server requests will be set to "Basic "
         */
        "basicAuth"?: boolean;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * If true the render will show the button to exit the renderer
         */
        "editMode"?: boolean;
        /**
          * Allows the renderer to show errors in the console while emitting error-events
         */
        "enableErrorConsoleLogging"?: boolean;
        /**
          * If true,
         */
        "enableExpand"?: boolean;
        /**
          * If true the Renderer will return a QuestionnaireResponse with all items, even if some items have been deactivated by enableWhen
         */
        "enableFullQuestionnaireResponse"?: boolean;
        /**
          * If true, shows the description of the group for every question thats part of the group
         */
        "enableGroupDescription"?: boolean;
        /**
          * If true enables the use of the informalLocal - only available for german translation
         */
        "enableInformalLocale"?: boolean;
        /**
          * If true enables the renderer to show the informationPage
         */
        "enableInformationPage"?: boolean;
        /**
          * Enable the button that can be used to show the summary or end the questionnaire
         */
        "enableNext"?: boolean;
        /**
          * Enable the return-button to exit the render-view
         */
        "enableReturn"?: boolean;
        /**
          * If true, enables the summary to send QuestionnaireResponses to the FHIR Server
         */
        "enableSendQuestionnaireResponse"?: boolean;
        /**
          * Enable the summary. The summary will be shown if enableSummary is true
         */
        "enableSummary"?: boolean;
        /**
          * Text shown in the top half of the information page
         */
        "informationPageText"?: string;
        /**
          * If true, the Renderer will show the last question
         */
        "lastQuestion"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        /**
          * Current type of Questionnaire-Style to display Available: stepper-questionnaire, grouped-questionnaire, full-questionnaire
         */
        "mode"?: string;
        "onAddRemarks"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        "onCloseSummary"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        /**
          * Emits an Event to exit the Renderer
         */
        "onExit"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        "onFinished"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        "onUpdated"?: (event: QuestionnaireRendererCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        /**
          * FHIR-Resource Questionnaire
         */
        "questionnaire"?: any;
        /**
          * FHIR-Resource QuestionnaireResponse
         */
        "questionnaireResponse"?: any;
        /**
          * The Url to fetch the Questionnaire from
         */
        "questionnaireUrl"?: string;
        /**
          * Secondary color
         */
        "secondary"?: string;
        /**
          * If showOnlySummary is true, the questionnaire-renderer will only show the summary
         */
        "showOnlySummary"?: boolean;
        /**
          * if true shows the remarks at the bottom of the summary
         */
        "showSummaryRemarks"?: boolean;
        /**
          * ID of the question in the ItemList where in the list of questions the renderer should start
         */
        "startQuestion"?: Object;
        /**
          * FHIR-Resource Patient
         */
        "subject"?: any;
        /**
          * Text shown in the top half of the Summary
         */
        "summaryText"?: string;
        /**
          * FHIR-Resource Task
         */
        "task"?: any;
        /**
          * A token that can be send with server-requests
         */
        "token"?: string;
        /**
          * Shows a trademark/copyright text at the bottom of the renderer
         */
        "trademarkText"?: string;
        /**
          * List of ValueSets that are needed to display the given questionnaire
         */
        "valueSets"?: Array<any>;
        "variant"?: any;
        /**
          * Text for the label of the selected value
         */
        "vasSelectedValueLabel"?: string;
        /**
          * If true shows the selected value for the vas scale
         */
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface QuestionnaireSummary {
        "baseUrl"?: string;
        "basicAuth"?: boolean;
        "demoMode"?: Boolean;
        "editable"?: boolean;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        "enableSendQuestionnaireResponse"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onAddRemarks"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        "onCloseSummary"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        /**
          * Emits an event to return to the questionnaire renderer to edit a question
         */
        "onEditQuestion"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        "onFinishQuestionnaire"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        "onFinishTask"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        /**
          * Emits an event to return to the questionnaire renderer
         */
        "onToQuestionnaireRenderer"?: (event: QuestionnaireSummaryCustomEvent<any>) => void;
        "questionnaire"?: any;
        "questionnaireResponse"?: any;
        "showSummaryRemarks"?: boolean;
        /**
          * FHIR Patient-Resource
         */
        "subject"?: Object;
        "summary_text"?: string;
        "task"?: any;
        "token"?: string;
        "trademarkText"?: string;
    }
    interface SimpleSpinner {
        "borderTopColor"?: string;
        "message"?: String;
    }
    interface StepperQuestionnaire {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "editMode"?: boolean;
        "enableErrorConsoleLogging"?: boolean;
        "enableGroupDescription"?: boolean;
        "enableInformalLocale"?: boolean;
        "enableNext"?: boolean;
        "enableReturn"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "enableSummary"?: boolean;
        "filteredItemList"?: Array<any>;
        "lastQuestion"?: boolean;
        "locale"?: string;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: StepperQuestionnaireCustomEvent<any>) => void;
        "onFinish"?: (event: StepperQuestionnaireCustomEvent<any>) => void;
        "onReturn"?: (event: StepperQuestionnaireCustomEvent<any>) => void;
        "onSummary"?: (event: StepperQuestionnaireCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "questionnaire": any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "spinner"?: any;
        "startCount"?: number;
        "trademarkText"?: string;
        "valueSets"?: Array<any>;
        "variant"?: any;
        "vasSelectedValueLabel"?: string;
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface StringQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: StringQuestionCustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: StringQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: StringQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface TestUi {
    }
    interface TextQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: TextQuestionCustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: TextQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: TextQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface TimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: TimeQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: TimeQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface UrlQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "enableErrorConsoleLogging"?: boolean;
        "enableInformalLocale"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en, es]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: UrlQuestionCustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: UrlQuestionCustomEvent<any>) => void;
        "onEmitRemoveRequiredAnswer"?: (event: UrlQuestionCustomEvent<any>) => void;
        /**
          * Emits an error-event
         */
        "onErrorLog"?: (event: UrlQuestionCustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "variant"?: any;
    }
    interface VasQuestion {
        "labelLower"?: String;
        "labelUpper"?: String;
        "max"?: number;
        "min"?: number;
        "onEmitSelected"?: (event: VasQuestionCustomEvent<any>) => void;
        "selected"?: number;
        "step"?: number;
        "variant"?: any;
        "vasSelectedValueLabel"?: string;
        "vasShowSelectedValue"?: boolean;
        /**
          * Options for Visual Analog Scale
         */
        "vasVertical"?: boolean;
    }
    interface IntrinsicElements {
        "boolean-question": BooleanQuestion;
        "choice-question": ChoiceQuestion;
        "date-question": DateQuestion;
        "date-time-question": DateTimeQuestion;
        "decimal-question": DecimalQuestion;
        "display-question": DisplayQuestion;
        "full-questionnaire": FullQuestionnaire;
        "group-question": GroupQuestion;
        "grouped-questionnaire": GroupedQuestionnaire;
        "information-page": InformationPage;
        "integer-question": IntegerQuestion;
        "questionnaire-renderer": QuestionnaireRenderer;
        "questionnaire-summary": QuestionnaireSummary;
        "simple-spinner": SimpleSpinner;
        "stepper-questionnaire": StepperQuestionnaire;
        "string-question": StringQuestion;
        "test-ui": TestUi;
        "text-question": TextQuestion;
        "time-question": TimeQuestion;
        "url-question": UrlQuestion;
        "vas-question": VasQuestion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "boolean-question": LocalJSX.BooleanQuestion & JSXBase.HTMLAttributes<HTMLBooleanQuestionElement>;
            "choice-question": LocalJSX.ChoiceQuestion & JSXBase.HTMLAttributes<HTMLChoiceQuestionElement>;
            "date-question": LocalJSX.DateQuestion & JSXBase.HTMLAttributes<HTMLDateQuestionElement>;
            "date-time-question": LocalJSX.DateTimeQuestion & JSXBase.HTMLAttributes<HTMLDateTimeQuestionElement>;
            "decimal-question": LocalJSX.DecimalQuestion & JSXBase.HTMLAttributes<HTMLDecimalQuestionElement>;
            "display-question": LocalJSX.DisplayQuestion & JSXBase.HTMLAttributes<HTMLDisplayQuestionElement>;
            "full-questionnaire": LocalJSX.FullQuestionnaire & JSXBase.HTMLAttributes<HTMLFullQuestionnaireElement>;
            "group-question": LocalJSX.GroupQuestion & JSXBase.HTMLAttributes<HTMLGroupQuestionElement>;
            "grouped-questionnaire": LocalJSX.GroupedQuestionnaire & JSXBase.HTMLAttributes<HTMLGroupedQuestionnaireElement>;
            "information-page": LocalJSX.InformationPage & JSXBase.HTMLAttributes<HTMLInformationPageElement>;
            "integer-question": LocalJSX.IntegerQuestion & JSXBase.HTMLAttributes<HTMLIntegerQuestionElement>;
            "questionnaire-renderer": LocalJSX.QuestionnaireRenderer & JSXBase.HTMLAttributes<HTMLQuestionnaireRendererElement>;
            "questionnaire-summary": LocalJSX.QuestionnaireSummary & JSXBase.HTMLAttributes<HTMLQuestionnaireSummaryElement>;
            "simple-spinner": LocalJSX.SimpleSpinner & JSXBase.HTMLAttributes<HTMLSimpleSpinnerElement>;
            "stepper-questionnaire": LocalJSX.StepperQuestionnaire & JSXBase.HTMLAttributes<HTMLStepperQuestionnaireElement>;
            "string-question": LocalJSX.StringQuestion & JSXBase.HTMLAttributes<HTMLStringQuestionElement>;
            "test-ui": LocalJSX.TestUi & JSXBase.HTMLAttributes<HTMLTestUiElement>;
            "text-question": LocalJSX.TextQuestion & JSXBase.HTMLAttributes<HTMLTextQuestionElement>;
            "time-question": LocalJSX.TimeQuestion & JSXBase.HTMLAttributes<HTMLTimeQuestionElement>;
            "url-question": LocalJSX.UrlQuestion & JSXBase.HTMLAttributes<HTMLUrlQuestionElement>;
            "vas-question": LocalJSX.VasQuestion & JSXBase.HTMLAttributes<HTMLVasQuestionElement>;
        }
    }
}
