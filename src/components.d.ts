/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BooleanQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface ChoiceQuestion {
        "answers": any;
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaire": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
        "valueSets": Array<any>;
    }
    interface DateQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface DateTimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface DecimalQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface DisplayQuestion {
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        "question": any;
    }
    interface FullQuestionnaire {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "filteredItemList": Array<any>;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        /**
          * Primary color
         */
        "primary": string;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        "spinner": any;
        "startCount": Number;
        "valueSets": Array<any>;
    }
    interface GroupQuestion {
        "baseUrl": string;
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        "editMode": boolean;
        "enableReturn": boolean;
        "filteredItemList": Array<any>;
        "lastQuestion": boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaire": any;
        "questionnaireResponse": Object;
        "requiredQuestionList": Array<any>;
        /**
          * Secondary color
         */
        "secondary": string;
        "startCount": Number;
        "valueSets": Array<any>;
    }
    interface GroupsQuestionnaire {
    }
    interface IntegerQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface SimpleSpinner {
        "borderTopColor": string;
        "message": String;
    }
    interface StepperQuestionnaire {
    }
    interface TimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger": string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale": string;
        "mode": string;
        /**
          * Primary color
         */
        "primary": string;
        "question": any;
        "questionnaireResponse": Object;
        /**
          * Secondary color
         */
        "secondary": string;
    }
    interface VasQuestion {
        "labelLower": String;
        "labelUpper": String;
        "max": number;
        "min": number;
        "selected": number;
        "step": number;
    }
}
declare global {
    interface HTMLBooleanQuestionElement extends Components.BooleanQuestion, HTMLStencilElement {
    }
    var HTMLBooleanQuestionElement: {
        prototype: HTMLBooleanQuestionElement;
        new (): HTMLBooleanQuestionElement;
    };
    interface HTMLChoiceQuestionElement extends Components.ChoiceQuestion, HTMLStencilElement {
    }
    var HTMLChoiceQuestionElement: {
        prototype: HTMLChoiceQuestionElement;
        new (): HTMLChoiceQuestionElement;
    };
    interface HTMLDateQuestionElement extends Components.DateQuestion, HTMLStencilElement {
    }
    var HTMLDateQuestionElement: {
        prototype: HTMLDateQuestionElement;
        new (): HTMLDateQuestionElement;
    };
    interface HTMLDateTimeQuestionElement extends Components.DateTimeQuestion, HTMLStencilElement {
    }
    var HTMLDateTimeQuestionElement: {
        prototype: HTMLDateTimeQuestionElement;
        new (): HTMLDateTimeQuestionElement;
    };
    interface HTMLDecimalQuestionElement extends Components.DecimalQuestion, HTMLStencilElement {
    }
    var HTMLDecimalQuestionElement: {
        prototype: HTMLDecimalQuestionElement;
        new (): HTMLDecimalQuestionElement;
    };
    interface HTMLDisplayQuestionElement extends Components.DisplayQuestion, HTMLStencilElement {
    }
    var HTMLDisplayQuestionElement: {
        prototype: HTMLDisplayQuestionElement;
        new (): HTMLDisplayQuestionElement;
    };
    interface HTMLFullQuestionnaireElement extends Components.FullQuestionnaire, HTMLStencilElement {
    }
    var HTMLFullQuestionnaireElement: {
        prototype: HTMLFullQuestionnaireElement;
        new (): HTMLFullQuestionnaireElement;
    };
    interface HTMLGroupQuestionElement extends Components.GroupQuestion, HTMLStencilElement {
    }
    var HTMLGroupQuestionElement: {
        prototype: HTMLGroupQuestionElement;
        new (): HTMLGroupQuestionElement;
    };
    interface HTMLGroupsQuestionnaireElement extends Components.GroupsQuestionnaire, HTMLStencilElement {
    }
    var HTMLGroupsQuestionnaireElement: {
        prototype: HTMLGroupsQuestionnaireElement;
        new (): HTMLGroupsQuestionnaireElement;
    };
    interface HTMLIntegerQuestionElement extends Components.IntegerQuestion, HTMLStencilElement {
    }
    var HTMLIntegerQuestionElement: {
        prototype: HTMLIntegerQuestionElement;
        new (): HTMLIntegerQuestionElement;
    };
    interface HTMLSimpleSpinnerElement extends Components.SimpleSpinner, HTMLStencilElement {
    }
    var HTMLSimpleSpinnerElement: {
        prototype: HTMLSimpleSpinnerElement;
        new (): HTMLSimpleSpinnerElement;
    };
    interface HTMLStepperQuestionnaireElement extends Components.StepperQuestionnaire, HTMLStencilElement {
    }
    var HTMLStepperQuestionnaireElement: {
        prototype: HTMLStepperQuestionnaireElement;
        new (): HTMLStepperQuestionnaireElement;
    };
    interface HTMLTimeQuestionElement extends Components.TimeQuestion, HTMLStencilElement {
    }
    var HTMLTimeQuestionElement: {
        prototype: HTMLTimeQuestionElement;
        new (): HTMLTimeQuestionElement;
    };
    interface HTMLVasQuestionElement extends Components.VasQuestion, HTMLStencilElement {
    }
    var HTMLVasQuestionElement: {
        prototype: HTMLVasQuestionElement;
        new (): HTMLVasQuestionElement;
    };
    interface HTMLElementTagNameMap {
        "boolean-question": HTMLBooleanQuestionElement;
        "choice-question": HTMLChoiceQuestionElement;
        "date-question": HTMLDateQuestionElement;
        "date-time-question": HTMLDateTimeQuestionElement;
        "decimal-question": HTMLDecimalQuestionElement;
        "display-question": HTMLDisplayQuestionElement;
        "full-questionnaire": HTMLFullQuestionnaireElement;
        "group-question": HTMLGroupQuestionElement;
        "groups-questionnaire": HTMLGroupsQuestionnaireElement;
        "integer-question": HTMLIntegerQuestionElement;
        "simple-spinner": HTMLSimpleSpinnerElement;
        "stepper-questionnaire": HTMLStepperQuestionnaireElement;
        "time-question": HTMLTimeQuestionElement;
        "vas-question": HTMLVasQuestionElement;
    }
}
declare namespace LocalJSX {
    interface BooleanQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface ChoiceQuestion {
        "answers"?: any;
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        "onEmitRemoveRequiredAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaire"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "valueSets"?: Array<any>;
    }
    interface DateQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface DateTimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface DecimalQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface DisplayQuestion {
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "question"?: any;
    }
    interface FullQuestionnaire {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "filteredItemList"?: Array<any>;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "onBack"?: (event: CustomEvent<any>) => void;
        /**
          * Relays the Event from the question-components to the top-component
         */
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        "onSummery"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "questionnaire"?: any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "spinner"?: any;
        "startCount"?: Number;
        "valueSets"?: Array<any>;
    }
    interface GroupQuestion {
        "baseUrl"?: string;
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        "editMode"?: boolean;
        "enableReturn"?: boolean;
        "filteredItemList"?: Array<any>;
        "lastQuestion"?: boolean;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        /**
          * Emits new Event to give the required Question to Parent-Component to be added to the List of answered Questions
         */
        "onAddRequiredAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Relays the Event from the question-components to the top-component
         */
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Emits new Event to give the required Question to Parent-Component to be removed from the List of answered Questions
         */
        "onEmitRemoveRequiredAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaire": any;
        "questionnaireResponse"?: Object;
        "requiredQuestionList"?: Array<any>;
        /**
          * Secondary color
         */
        "secondary"?: string;
        "startCount"?: Number;
        "valueSets"?: Array<any>;
    }
    interface GroupsQuestionnaire {
    }
    interface IntegerQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Handles KeyPresses by adding Eventlisteners
         */
        "onEmitNext"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface SimpleSpinner {
        "borderTopColor"?: string;
        "message"?: String;
    }
    interface StepperQuestionnaire {
    }
    interface TimeQuestion {
        /**
          * Color used to symbolise danger
         */
        "danger"?: string;
        /**
          * Language property of the component. </br> Currently suported: [de, en]
         */
        "locale"?: string;
        "mode"?: string;
        "onEmitAnswer"?: (event: CustomEvent<any>) => void;
        /**
          * Primary color
         */
        "primary"?: string;
        "question"?: any;
        "questionnaireResponse"?: Object;
        /**
          * Secondary color
         */
        "secondary"?: string;
    }
    interface VasQuestion {
        "labelLower"?: String;
        "labelUpper"?: String;
        "max"?: number;
        "min"?: number;
        "onEmitSelected"?: (event: CustomEvent<any>) => void;
        "selected"?: number;
        "step"?: number;
    }
    interface IntrinsicElements {
        "boolean-question": BooleanQuestion;
        "choice-question": ChoiceQuestion;
        "date-question": DateQuestion;
        "date-time-question": DateTimeQuestion;
        "decimal-question": DecimalQuestion;
        "display-question": DisplayQuestion;
        "full-questionnaire": FullQuestionnaire;
        "group-question": GroupQuestion;
        "groups-questionnaire": GroupsQuestionnaire;
        "integer-question": IntegerQuestion;
        "simple-spinner": SimpleSpinner;
        "stepper-questionnaire": StepperQuestionnaire;
        "time-question": TimeQuestion;
        "vas-question": VasQuestion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "boolean-question": LocalJSX.BooleanQuestion & JSXBase.HTMLAttributes<HTMLBooleanQuestionElement>;
            "choice-question": LocalJSX.ChoiceQuestion & JSXBase.HTMLAttributes<HTMLChoiceQuestionElement>;
            "date-question": LocalJSX.DateQuestion & JSXBase.HTMLAttributes<HTMLDateQuestionElement>;
            "date-time-question": LocalJSX.DateTimeQuestion & JSXBase.HTMLAttributes<HTMLDateTimeQuestionElement>;
            "decimal-question": LocalJSX.DecimalQuestion & JSXBase.HTMLAttributes<HTMLDecimalQuestionElement>;
            "display-question": LocalJSX.DisplayQuestion & JSXBase.HTMLAttributes<HTMLDisplayQuestionElement>;
            "full-questionnaire": LocalJSX.FullQuestionnaire & JSXBase.HTMLAttributes<HTMLFullQuestionnaireElement>;
            "group-question": LocalJSX.GroupQuestion & JSXBase.HTMLAttributes<HTMLGroupQuestionElement>;
            "groups-questionnaire": LocalJSX.GroupsQuestionnaire & JSXBase.HTMLAttributes<HTMLGroupsQuestionnaireElement>;
            "integer-question": LocalJSX.IntegerQuestion & JSXBase.HTMLAttributes<HTMLIntegerQuestionElement>;
            "simple-spinner": LocalJSX.SimpleSpinner & JSXBase.HTMLAttributes<HTMLSimpleSpinnerElement>;
            "stepper-questionnaire": LocalJSX.StepperQuestionnaire & JSXBase.HTMLAttributes<HTMLStepperQuestionnaireElement>;
            "time-question": LocalJSX.TimeQuestion & JSXBase.HTMLAttributes<HTMLTimeQuestionElement>;
            "vas-question": LocalJSX.VasQuestion & JSXBase.HTMLAttributes<HTMLVasQuestionElement>;
        }
    }
}
